// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogomotiveServiceClient is the client API for LogomotiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogomotiveServiceClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	Feed(ctx context.Context, opts ...grpc.CallOption) (LogomotiveService_FeedClient, error)
	Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (LogomotiveService_TailClient, error)
	Labels(ctx context.Context, in *LabelsRequest, opts ...grpc.CallOption) (*LabelsResponse, error)
}

type logomotiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogomotiveServiceClient(cc grpc.ClientConnInterface) LogomotiveServiceClient {
	return &logomotiveServiceClient{cc}
}

func (c *logomotiveServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/api.v1.LogomotiveService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logomotiveServiceClient) Feed(ctx context.Context, opts ...grpc.CallOption) (LogomotiveService_FeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogomotiveService_ServiceDesc.Streams[0], "/api.v1.LogomotiveService/Feed", opts...)
	if err != nil {
		return nil, err
	}
	x := &logomotiveServiceFeedClient{stream}
	return x, nil
}

type LogomotiveService_FeedClient interface {
	Send(*FeedRequest) error
	Recv() (*FeedResponse, error)
	grpc.ClientStream
}

type logomotiveServiceFeedClient struct {
	grpc.ClientStream
}

func (x *logomotiveServiceFeedClient) Send(m *FeedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logomotiveServiceFeedClient) Recv() (*FeedResponse, error) {
	m := new(FeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logomotiveServiceClient) Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (LogomotiveService_TailClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogomotiveService_ServiceDesc.Streams[1], "/api.v1.LogomotiveService/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &logomotiveServiceTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogomotiveService_TailClient interface {
	Recv() (*TailResponse, error)
	grpc.ClientStream
}

type logomotiveServiceTailClient struct {
	grpc.ClientStream
}

func (x *logomotiveServiceTailClient) Recv() (*TailResponse, error) {
	m := new(TailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logomotiveServiceClient) Labels(ctx context.Context, in *LabelsRequest, opts ...grpc.CallOption) (*LabelsResponse, error) {
	out := new(LabelsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.LogomotiveService/Labels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogomotiveServiceServer is the server API for LogomotiveService service.
// All implementations must embed UnimplementedLogomotiveServiceServer
// for forward compatibility
type LogomotiveServiceServer interface {
	Push(context.Context, *PushRequest) (*PushResponse, error)
	Feed(LogomotiveService_FeedServer) error
	Tail(*TailRequest, LogomotiveService_TailServer) error
	Labels(context.Context, *LabelsRequest) (*LabelsResponse, error)
	mustEmbedUnimplementedLogomotiveServiceServer()
}

// UnimplementedLogomotiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogomotiveServiceServer struct {
}

func (UnimplementedLogomotiveServiceServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedLogomotiveServiceServer) Feed(LogomotiveService_FeedServer) error {
	return status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedLogomotiveServiceServer) Tail(*TailRequest, LogomotiveService_TailServer) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedLogomotiveServiceServer) Labels(context.Context, *LabelsRequest) (*LabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Labels not implemented")
}
func (UnimplementedLogomotiveServiceServer) mustEmbedUnimplementedLogomotiveServiceServer() {}

// UnsafeLogomotiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogomotiveServiceServer will
// result in compilation errors.
type UnsafeLogomotiveServiceServer interface {
	mustEmbedUnimplementedLogomotiveServiceServer()
}

func RegisterLogomotiveServiceServer(s grpc.ServiceRegistrar, srv LogomotiveServiceServer) {
	s.RegisterService(&LogomotiveService_ServiceDesc, srv)
}

func _LogomotiveService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogomotiveServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LogomotiveService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogomotiveServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogomotiveService_Feed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogomotiveServiceServer).Feed(&logomotiveServiceFeedServer{stream})
}

type LogomotiveService_FeedServer interface {
	Send(*FeedResponse) error
	Recv() (*FeedRequest, error)
	grpc.ServerStream
}

type logomotiveServiceFeedServer struct {
	grpc.ServerStream
}

func (x *logomotiveServiceFeedServer) Send(m *FeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logomotiveServiceFeedServer) Recv() (*FeedRequest, error) {
	m := new(FeedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogomotiveService_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogomotiveServiceServer).Tail(m, &logomotiveServiceTailServer{stream})
}

type LogomotiveService_TailServer interface {
	Send(*TailResponse) error
	grpc.ServerStream
}

type logomotiveServiceTailServer struct {
	grpc.ServerStream
}

func (x *logomotiveServiceTailServer) Send(m *TailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogomotiveService_Labels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogomotiveServiceServer).Labels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LogomotiveService/Labels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogomotiveServiceServer).Labels(ctx, req.(*LabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogomotiveService_ServiceDesc is the grpc.ServiceDesc for LogomotiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogomotiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.LogomotiveService",
	HandlerType: (*LogomotiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _LogomotiveService_Push_Handler,
		},
		{
			MethodName: "Labels",
			Handler:    _LogomotiveService_Labels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Feed",
			Handler:       _LogomotiveService_Feed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Tail",
			Handler:       _LogomotiveService_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/logomotive.proto",
}
