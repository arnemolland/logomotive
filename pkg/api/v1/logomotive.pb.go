// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: api/v1/logomotive.proto

package logomotive

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Label   string               `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Time    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_logomotive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_logomotive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_api_v1_logomotive_proto_rawDescGZIP(), []int{0}
}

func (x *LogEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogEntry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogEntry) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LogEntry) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type LabelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *LabelList) Reset() {
	*x = LabelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_logomotive_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelList) ProtoMessage() {}

func (x *LabelList) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_logomotive_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelList.ProtoReflect.Descriptor instead.
func (*LabelList) Descriptor() ([]byte, []int) {
	return file_api_v1_logomotive_proto_rawDescGZIP(), []int{1}
}

func (x *LabelList) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type TailQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *TailQuery) Reset() {
	*x = TailQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_logomotive_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailQuery) ProtoMessage() {}

func (x *TailQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_logomotive_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailQuery.ProtoReflect.Descriptor instead.
func (*TailQuery) Descriptor() ([]byte, []int) {
	return file_api_v1_logomotive_proto_rawDescGZIP(), []int{2}
}

func (x *TailQuery) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

var File_api_v1_logomotive_proto protoreflect.FileDescriptor

var file_api_v1_logomotive_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x23, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x54, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0xe8, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68, 0x12, 0x14,
	0x2e, 0x6c, 0x6f, 0x67, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x2e, 0x6c, 0x6f, 0x67,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x6c, 0x6f,
	0x67, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x6e, 0x65, 0x6d, 0x6f, 0x6c, 0x6c, 0x61, 0x6e, 0x64, 0x2f, 0x6c, 0x6f, 0x67,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_logomotive_proto_rawDescOnce sync.Once
	file_api_v1_logomotive_proto_rawDescData = file_api_v1_logomotive_proto_rawDesc
)

func file_api_v1_logomotive_proto_rawDescGZIP() []byte {
	file_api_v1_logomotive_proto_rawDescOnce.Do(func() {
		file_api_v1_logomotive_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_logomotive_proto_rawDescData)
	})
	return file_api_v1_logomotive_proto_rawDescData
}

var file_api_v1_logomotive_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_v1_logomotive_proto_goTypes = []interface{}{
	(*LogEntry)(nil),            // 0: logomotive.LogEntry
	(*LabelList)(nil),           // 1: logomotive.LabelList
	(*TailQuery)(nil),           // 2: logomotive.TailQuery
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 4: google.protobuf.Empty
}
var file_api_v1_logomotive_proto_depIdxs = []int32{
	3, // 0: logomotive.LogEntry.time:type_name -> google.protobuf.Timestamp
	0, // 1: logomotive.Logomotive.Push:input_type -> logomotive.LogEntry
	0, // 2: logomotive.Logomotive.Feed:input_type -> logomotive.LogEntry
	2, // 3: logomotive.Logomotive.Tail:input_type -> logomotive.TailQuery
	4, // 4: logomotive.Logomotive.Labels:input_type -> google.protobuf.Empty
	0, // 5: logomotive.Logomotive.Push:output_type -> logomotive.LogEntry
	0, // 6: logomotive.Logomotive.Feed:output_type -> logomotive.LogEntry
	0, // 7: logomotive.Logomotive.Tail:output_type -> logomotive.LogEntry
	1, // 8: logomotive.Logomotive.Labels:output_type -> logomotive.LabelList
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_v1_logomotive_proto_init() }
func file_api_v1_logomotive_proto_init() {
	if File_api_v1_logomotive_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_logomotive_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_logomotive_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_logomotive_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_logomotive_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_logomotive_proto_goTypes,
		DependencyIndexes: file_api_v1_logomotive_proto_depIdxs,
		MessageInfos:      file_api_v1_logomotive_proto_msgTypes,
	}.Build()
	File_api_v1_logomotive_proto = out.File
	file_api_v1_logomotive_proto_rawDesc = nil
	file_api_v1_logomotive_proto_goTypes = nil
	file_api_v1_logomotive_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogomotiveClient is the client API for Logomotive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogomotiveClient interface {
	Push(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*LogEntry, error)
	Feed(ctx context.Context, opts ...grpc.CallOption) (Logomotive_FeedClient, error)
	Tail(ctx context.Context, in *TailQuery, opts ...grpc.CallOption) (Logomotive_TailClient, error)
	Labels(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LabelList, error)
}

type logomotiveClient struct {
	cc grpc.ClientConnInterface
}

func NewLogomotiveClient(cc grpc.ClientConnInterface) LogomotiveClient {
	return &logomotiveClient{cc}
}

func (c *logomotiveClient) Push(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*LogEntry, error) {
	out := new(LogEntry)
	err := c.cc.Invoke(ctx, "/logomotive.Logomotive/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logomotiveClient) Feed(ctx context.Context, opts ...grpc.CallOption) (Logomotive_FeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logomotive_serviceDesc.Streams[0], "/logomotive.Logomotive/Feed", opts...)
	if err != nil {
		return nil, err
	}
	x := &logomotiveFeedClient{stream}
	return x, nil
}

type Logomotive_FeedClient interface {
	Send(*LogEntry) error
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type logomotiveFeedClient struct {
	grpc.ClientStream
}

func (x *logomotiveFeedClient) Send(m *LogEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logomotiveFeedClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logomotiveClient) Tail(ctx context.Context, in *TailQuery, opts ...grpc.CallOption) (Logomotive_TailClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logomotive_serviceDesc.Streams[1], "/logomotive.Logomotive/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &logomotiveTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logomotive_TailClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type logomotiveTailClient struct {
	grpc.ClientStream
}

func (x *logomotiveTailClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logomotiveClient) Labels(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LabelList, error) {
	out := new(LabelList)
	err := c.cc.Invoke(ctx, "/logomotive.Logomotive/Labels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogomotiveServer is the server API for Logomotive service.
type LogomotiveServer interface {
	Push(context.Context, *LogEntry) (*LogEntry, error)
	Feed(Logomotive_FeedServer) error
	Tail(*TailQuery, Logomotive_TailServer) error
	Labels(context.Context, *empty.Empty) (*LabelList, error)
}

// UnimplementedLogomotiveServer can be embedded to have forward compatible implementations.
type UnimplementedLogomotiveServer struct {
}

func (*UnimplementedLogomotiveServer) Push(context.Context, *LogEntry) (*LogEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedLogomotiveServer) Feed(Logomotive_FeedServer) error {
	return status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (*UnimplementedLogomotiveServer) Tail(*TailQuery, Logomotive_TailServer) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (*UnimplementedLogomotiveServer) Labels(context.Context, *empty.Empty) (*LabelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Labels not implemented")
}

func RegisterLogomotiveServer(s *grpc.Server, srv LogomotiveServer) {
	s.RegisterService(&_Logomotive_serviceDesc, srv)
}

func _Logomotive_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogomotiveServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logomotive.Logomotive/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogomotiveServer).Push(ctx, req.(*LogEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logomotive_Feed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogomotiveServer).Feed(&logomotiveFeedServer{stream})
}

type Logomotive_FeedServer interface {
	Send(*LogEntry) error
	Recv() (*LogEntry, error)
	grpc.ServerStream
}

type logomotiveFeedServer struct {
	grpc.ServerStream
}

func (x *logomotiveFeedServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logomotiveFeedServer) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Logomotive_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogomotiveServer).Tail(m, &logomotiveTailServer{stream})
}

type Logomotive_TailServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type logomotiveTailServer struct {
	grpc.ServerStream
}

func (x *logomotiveTailServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Logomotive_Labels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogomotiveServer).Labels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logomotive.Logomotive/Labels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogomotiveServer).Labels(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logomotive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logomotive.Logomotive",
	HandlerType: (*LogomotiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Logomotive_Push_Handler,
		},
		{
			MethodName: "Labels",
			Handler:    _Logomotive_Labels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Feed",
			Handler:       _Logomotive_Feed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Tail",
			Handler:       _Logomotive_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/logomotive.proto",
}
